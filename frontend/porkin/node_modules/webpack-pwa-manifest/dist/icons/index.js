"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.retrieveIcons = retrieveIcons;
exports.parseIcons = parseIcons;

var _fs = _interopRequireDefault(require("fs"));

var _jimp = _interopRequireDefault(require("jimp"));

var _mime = _interopRequireDefault(require("mime"));

var _uri = require("../helpers/uri");

var _fingerprint = _interopRequireDefault(require("../helpers/fingerprint"));

var _IconError = _interopRequireDefault(require("../errors/IconError"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var supportedMimeTypes = [_jimp["default"].MIME_PNG, _jimp["default"].MIME_JPEG, _jimp["default"].MIME_BMP];

function parseArray(i) {
  return i && !Array.isArray(i) ? [i] : i;
}

function sanitizeIcon(iconSnippet) {
  if (!iconSnippet.src) throw new _IconError["default"]('Unknown icon source.');
  var arr = parseArray(iconSnippet.size || iconSnippet.sizes);
  if (!arr) throw new _IconError["default"]('Unknown icon sizes.');
  var sizes = [];

  var _iterator = _createForOfIteratorHelper(arr),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var size = _step.value;
      sizes.push(+size || parseInt(size));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return {
    src: iconSnippet.src,
    sizes: sizes,
    destination: iconSnippet.destination,
    ios: iconSnippet.ios || false,
    color: iconSnippet.color,
    purpose: iconSnippet.purpose
  };
}

function processIcon(currentSize, icon, buffer, mimeType, publicPath, shouldFingerprint) {
  var dimensions = "".concat(currentSize, "x").concat(currentSize);
  var fileName = shouldFingerprint ? "icon_".concat(dimensions, ".").concat((0, _fingerprint["default"])(buffer), ".").concat(_mime["default"].getExtension(mimeType)) : "icon_".concat(dimensions, ".").concat(_mime["default"].getExtension(mimeType));
  var iconOutputDir = icon.destination ? (0, _uri.joinURI)(icon.destination, fileName) : fileName;
  var iconPublicUrl = (0, _uri.joinURI)(publicPath, iconOutputDir);
  return {
    manifestIcon: {
      src: iconPublicUrl,
      sizes: dimensions,
      type: mimeType,
      purpose: icon.purpose
    },
    webpackAsset: {
      output: iconOutputDir,
      url: iconPublicUrl,
      source: buffer,
      size: buffer.length,
      ios: icon.ios ? {
        valid: icon.ios,
        size: dimensions,
        href: iconPublicUrl
      } : false,
      color: icon.color
    }
  };
}

function process(sizes, icon, cachedIconsCopy, icons, assets, fingerprint, publicPath, callback) {
  var processNext = function processNext() {
    if (sizes.length > 0) {
      return process(sizes, icon, cachedIconsCopy, icons, assets, fingerprint, publicPath, callback); // next size
    } else if (cachedIconsCopy.length > 0) {
      var next = cachedIconsCopy.pop();
      return process(next.sizes, next, cachedIconsCopy, icons, assets, fingerprint, publicPath, callback); // next icon
    } else {
      return callback(null, {
        icons: icons,
        assets: assets
      }); // there are no more icons left
    }
  };

  var size = sizes.pop();

  if (size > 0) {
    var mimeType = _mime["default"].getType(icon.src);

    if (!supportedMimeTypes.includes(mimeType)) {
      var buffer;

      try {
        buffer = _fs["default"].readFileSync(icon.src);
      } catch (err) {
        throw new _IconError["default"]("It was not possible to read '".concat(icon.src, "'."));
      }

      var processedIcon = processIcon(size, icon, buffer, mimeType, publicPath, fingerprint);
      icons.push(processedIcon.manifestIcon);
      assets.push(processedIcon.webpackAsset);
      return processNext();
    }

    _jimp["default"].read(icon.src, function (err, img) {
      if (err) throw new _IconError["default"]("It was not possible to read '".concat(icon.src, "'."));
      img.resize(size, size).getBuffer(mimeType, function (err, buffer) {
        if (err) throw new _IconError["default"]("It was not possible to retrieve buffer of '".concat(icon.src, "'."));
        var processedIcon = processIcon(size, icon, buffer, mimeType, publicPath, fingerprint);
        icons.push(processedIcon.manifestIcon);
        assets.push(processedIcon.webpackAsset);
        return processNext();
      });
    });
  }
}

function retrieveIcons(options) {
  var icons = parseArray(options.icon || options.icons);
  var response = [];

  if (icons) {
    var _iterator2 = _createForOfIteratorHelper(icons),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var icon = _step2.value;
        response.push(sanitizeIcon(icon));
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

  delete options.icon;
  delete options.icons;
  return response;
}

function parseIcons(fingerprint, publicPath, icons, callback) {
  if (icons.length === 0) {
    callback(null, {});
  } else {
    var first = icons.pop();
    process(first.sizes, first, icons, [], [], fingerprint, publicPath, callback);
  }
}